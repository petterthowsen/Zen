//-----------------------------------//
// Namespaces, Packages, and Imports
//-----------------------------------//
// Zen organizes code into namespaces based on folder structure.
// - Folders represent namespaces.
// - Each `.zen` file in a given namespace is a "module".
// - Modules can define one or more symbols (functions, classes, etc.).
// - Zen projects define their root namespace through a `package.zen` file.
// - When importing, Zen automatically treats modules as namespaces if they
//   contain more than one symbol, simplifying import syntax and scoping.
//
// Note: Zen ignores any files starting with an underscore.
// This is to allow developers to create .zen files in their package for other purposes.

//-----------------------------------
// Example Directory Structure:

// GameEngine/
// - package.zen
// - Core/
// -- Vector2.zen
// -- Utils.zen
// -- Nested/
// --- Special.zen

// where `package.zen` contains
package GameEngine

// where `Utils.zen` contains:
func hello() {}
func world() {}
 
// where `Vector2.zen` contains:
class Vector2 {
    x: int
    y: int
}

// where `Special.zen` contains:
func specialFunc() {}

//-----------------------------------
// Import Syntax

// Zen supports multiple ways to import modules and symbols within namespaces, 
// with automatic handling for single-symbol vs. multi-symbol modules:

// 1. Import Namespace: Imports all symbols from all modules directly under
//    the specified namespace if the module has multiple symbols.

import GameEngine/Core
hello()         // Available directly
world()         // Available directly
var vec2 = Vector2() // Only if Vector2 is defined as part of GameEngine/Core

// 2. Import Namespace with Scoped Alias: Imports all symbols but keeps them
//    scoped under an alias.

import GameEngine/Core as gec
gec.hello()     // Scoped access
gec.world()     // Scoped access

// 3. Importing a Single-symbol Module Directly: If a module defines only
//    a single symbol, it is imported directly by default.

import GameEngine/Core/Vector2
var vec2 = Vector2() // Direct access without specifying symbol name

// 4. Importing a Single-symbol Module with Alias: You can alias a single-symbol
//    module for clarity or disambiguation.

import GameEngine/Core/Vector2 as CoreVector2
var vec2 = CoreVector2()

// 5. Importing Specific Symbols from a Multi-symbol Module: If a module defines 
//    multiple symbols, you can selectively import symbols using the `from` syntax.

from GameEngine/Core/Utils import hello
hello()        // Directly accessible
world()        // Error: not imported

// Notes:
// - Modules with more than one symbol are treated as namespaces, 
//   allowing flexible import and scoping.
// - Single-symbol modules are directly accessible upon import, 
//   reducing verbosity and improving readability.
// - Aliasing with `as` works for both single-symbol and multi-symbol modules.



//-----------------------------------//
// Include
//-----------------------------------//
// Zen's `include` function allows files to be included directly, either as code within scope or as a structured data return if a `return` statement is present in the included file.
const config = include("config.zen")  // Loads return value from config.zen, such as {"key": "value"}

// File Return Values and Structured Data Support
// Files with `return` statements can return structured data, and `include` supports various data formats like JSON directly.
const settings = include("settings.json")  // Loads JSON as a structured map

// Include is mainly implemented to support loading of various structured data such as configuration files.
// However, it's also possible to execute code from another file directly in the current scope.
// given a file 'myfile.zen' containing "var helloFromMyFile = 5"
// one can do this:
include("helloFromMyFile.zen")
print(helloFromMyFile) // 5


// Include can also be used to split class methods into multiple files
// It's recommended to prefix those files by and underscore to prevent Zen's importer to scan them.
// For example, if you have a file "MyClass.zen":
package MyPackage
class MyClass {
    include("_MyClass_methods.zen")
}

// and a file "_MyClass_methods.zen":
func init() {
    // constructor
}

// and importing the MyClass
from MyPackage import MyClass
var obj = new MyClass()